# -*- coding: utf-8 -*-
"""06 Chartify Tutorial.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/adaapp/dav-introductionToPandas/blob/master/06%20Chartify%20Tutorial.ipynb

Very slightly adapted from the developers' original tutorial [here](https://github.com/spotify/chartify/blob/master/examples/Chartify%20Tutorial.ipynb)

<h1>Table of Contents<span class="tocSkip"></span></h1>
<div class="toc" style="margin-top: 1em;"><ul class="toc-item"><li><span><a href="#Chart-object" data-toc-modified-id="Chart-object-1"><span class="toc-item-num">1&nbsp;&nbsp;</span>Chart object</a></span></li><li><span><a href="#Adding-chart-labels" data-toc-modified-id="Adding-chart-labels-2"><span class="toc-item-num">2&nbsp;&nbsp;</span>Adding chart labels</a></span></li><li><span><a href="#Getting-help" data-toc-modified-id="Getting-help-3"><span class="toc-item-num">3&nbsp;&nbsp;</span>Getting help</a></span></li><li><span><a href="#Callouts" data-toc-modified-id="Callouts-4"><span class="toc-item-num">4&nbsp;&nbsp;</span>Callouts</a></span></li><li><span><a href="#Axes" data-toc-modified-id="Axes-5"><span class="toc-item-num">5&nbsp;&nbsp;</span>Axes</a></span></li><li><span><a href="#Method-chaining" data-toc-modified-id="Method-chaining-6"><span class="toc-item-num">6&nbsp;&nbsp;</span>Method chaining</a></span></li><li><span><a href="#Plotting" data-toc-modified-id="Plotting-7"><span class="toc-item-num">7&nbsp;&nbsp;</span>Plotting</a></span><ul class="toc-item"><li><span><a href="#Input-data-format" data-toc-modified-id="Input-data-format-7.1"><span class="toc-item-num">7.1&nbsp;&nbsp;</span>Input data format</a></span></li><li><span><a href="#Pivoted-data:-INVALID" data-toc-modified-id="Pivoted-data:-INVALID-7.2"><span class="toc-item-num">7.2&nbsp;&nbsp;</span>Pivoted data: INVALID</a></span><ul class="toc-item"><li><span><a href="#Melting-pivoted-data:-VALID" data-toc-modified-id="Melting-pivoted-data:-VALID-7.2.1"><span class="toc-item-num">7.2.1&nbsp;&nbsp;</span>Melting pivoted data: VALID</a></span></li></ul></li><li><span><a href="#Pandas-series:-INVALID" data-toc-modified-id="Pandas-series:-INVALID-7.3"><span class="toc-item-num">7.3&nbsp;&nbsp;</span>Pandas series: INVALID</a></span></li><li><span><a href="#Pandas-index:-INVALID" data-toc-modified-id="Pandas-index:-INVALID-7.4"><span class="toc-item-num">7.4&nbsp;&nbsp;</span>Pandas index: INVALID</a></span></li><li><span><a href="#Pandas-DataFrame:-VALID" data-toc-modified-id="Pandas-DataFrame:-VALID-7.5"><span class="toc-item-num">7.5&nbsp;&nbsp;</span>Pandas DataFrame: VALID</a></span></li></ul></li><li><span><a href="#Axis-types" data-toc-modified-id="Axis-types-8"><span class="toc-item-num">8&nbsp;&nbsp;</span>Axis types</a></span></li><li><span><a href="#Vertical-Bar-plot" data-toc-modified-id="Vertical-Bar-plot-9"><span class="toc-item-num">9&nbsp;&nbsp;</span>Vertical Bar plot</a></span></li><li><span><a href="#Examples" data-toc-modified-id="Examples-10"><span class="toc-item-num">10&nbsp;&nbsp;</span>Examples</a></span></li><li><span><a href="#Bar-plot---Horizontal-vs.-Vertical" data-toc-modified-id="Bar-plot---Horizontal-vs.-Vertical-11"><span class="toc-item-num">11&nbsp;&nbsp;</span>Bar plot - Horizontal vs. Vertical</a></span></li><li><span><a href="#Grouped-bar-plot" data-toc-modified-id="Grouped-bar-plot-12"><span class="toc-item-num">12&nbsp;&nbsp;</span>Grouped bar plot</a></span></li><li><span><a href="#show('html')-vs.-show('png')" data-toc-modified-id="show('html')-vs.-show('png')-13"><span class="toc-item-num">13&nbsp;&nbsp;</span>show('html') vs. show('png')</a></span></li><li><span><a href="#Color-palette-types" data-toc-modified-id="Color-palette-types-14"><span class="toc-item-num">14&nbsp;&nbsp;</span>Color palette types</a></span></li><li><span><a href="#Color-palettes" data-toc-modified-id="Color-palettes-15"><span class="toc-item-num">15&nbsp;&nbsp;</span>Color palettes</a></span></li><li><span><a href="#Layouts" data-toc-modified-id="Layouts-16"><span class="toc-item-num">16&nbsp;&nbsp;</span>Layouts</a></span></li><li><span><a href="#Advanced-usage-with-Bokeh" data-toc-modified-id="Advanced-usage-with-Bokeh-17"><span class="toc-item-num">17&nbsp;&nbsp;</span>Advanced usage with Bokeh</a></span></li></ul></div>
"""

!pip install chartify

# Copyright (c) 2017-2018 Spotify AB
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
import chartify
import pandas as pd

# needed to make the examples work in the notebook
chartify.examples._OUTPUT_FORMAT = 'html'

"""# Chart object
- Run the cell below to instantiate a chart and assign to to a variable
"""

ch = chartify.Chart()

"""- Use .show() to render the chart."""

ch.show()

"""- Note that the chart is blank at this point.
- The default labels provide directions for how to override their values.

# Adding chart labels
- __Your turn__: Add labels to the following chart. Look at the default values for instruction.
- Title
- Subtitle
- Source
- X label
- Y label
"""

ch = chartify.Chart()
# Add code here to overwrite the labels


ch.show()

"""# Getting help
- From within a jupyter notebook you can see the available attributes of the chart object by pressing "tab"
- Select the space just after the "." character below and hit tab.
"""

ch = chartify.Chart()
ch.

"""- You can also use "?" to pull up documentation for objects and methods.
- Run the cell below to pull up the chartify.Chart documentation
"""

chartify.Chart?

"""- This can also be accomplished by pressing "shift + tab".
- Press "shift + tab" twice to see the expanded documentation.
- Try it with the next cell.
"""

chartify.Chart

"""# Callouts
- The chart object has a callout object (ch.callout) that contains methods for adding callouts to the chart.
- Callouts can be used to add text, lines, or shaded areas to annotate parts of your chart.
- __Your Turn:__ Fill in the code below to add a text callout that says "hi" at coordinate (10, 10)
- Look up the documentation for ch.callout.text if you need help
"""

ch = chartify.Chart()
#ch.callout.text()
    
ch.show()

"""- Use tab below to see what callouts are available."""

ch.callout.

"""# Axes
- The axes object contains methods for setting or getting axis properties.

- __Your turn__: modify the chart below so the xaxis range goes from 0 to 100
"""

ch = chartify.Chart()
ch.callout.text('hi', 10, 10)
# Add code here to modify the xrange to (0, 100)
ch.show()

"""# Method chaining
- Chart methods can be chained by wrapping the statments in parentheses. See the example below:
"""

(chartify.Chart(blank_labels=True)
 .callout.text('hi', 10, 10)
 .axes.set_xaxis_range(0, 100)
 .show()
)

"""# Plotting

## Input data format
Chartify expects the input data to be:
- Tidy (Each variable has its own column, each row corresponds to an observation)
- In the columns of a Pandas DataFrame.

Below we'll explore some examples of valid and invalid input data

- Run this cell to generate an example dataset
"""

data = chartify.examples.example_data()
data.head()

"""## Pivoted data: INVALID
- Pivoted data is not Tidy (note the `country` dimension has an observation in each column)
"""

pivoted_data = pd.pivot_table(data, columns='country', values='quantity', index='fruit', aggfunc='sum')
pivoted_data

"""### Melting pivoted data: VALID
- You can use pandas.melt to convert pivoted data into the tidy data format.
- The output of SQL queries with `groupby` produces output in tidy format.
"""

value_columns = pivoted_data.columns

melted_data = pd.melt(pivoted_data.reset_index(), # Need to reset the index to put "fruit" into a column.
                      id_vars='fruit',
                      value_vars=value_columns)
melted_data.head()

"""## Pandas series: INVALID
- Data in a pandas Series must be converted to a DataFrame for use with Chartify.
"""

data.groupby(['country'])['quantity'].sum()

"""## Pandas index: INVALID
- The output below is a pandas DataFrame, but the country dimension is in the Index.
"""

data.groupby(['country'])[['quantity']].sum()

"""## Pandas DataFrame: VALID
- The code below produces a valid pandas DataFrame for use with Chartify.
- Notice how the country dimension is now in a column.
"""

chart_data = data.groupby(['country'])['quantity'].sum().reset_index()
chart_data

"""# Axis types
- Specify the x_axis_type and y_axis_type parameters when instantiating the chart object.
- Both are set to `linear` by default.
- Look at the chart object documentation to see the list of available options for x_axis_type and y_axis_type
"""

chartify.Chart?

"""- __The Chart axis types influence the plots that are available__
- Look at how the plot methods change based on the axis types:
"""

ch = chartify.Chart(x_axis_type='datetime',
                    y_axis_type='linear')

"""When you've executed the cell above, the tab complete below will change"""

ch.plot.

ch = chartify.Chart(x_axis_type='categorical',
                    y_axis_type='linear')

"""And again"""

ch.plot.

"""- __Your turn__: Create a chart with 'density' y and 'linear' x axis types. What type of plots are available?"""

ch = chartify.Chart(# Your code goes here)

"""# Vertical Bar plot
- __Your turn__: Create a bar plot based on the dataframe below.
"""

bar_data = (data.groupby('country')[['quantity']].sum()
            .reset_index()
           )
bar_data

# Implement the bar plot here.
# Set the appropriate x_axis_type otherwise the bar method won't be available.
# Look at the bar documentation to figure out how to pass in the parameters.
# If you get stuck move on to the next section for hints.
ch = chartify.Chart(# Your code goes here)

"""# Examples
- Chartify includes many examples. They're a good starting point if you're trying to create a chart that you're unfamiliar with.
"""

chartify.examples.

"""- Run the appropriate method to see examples and the corresponding code that generates the example."""

chartify.examples.plot_bar()

"""# Bar plot - Horizontal vs. Vertical
- Copy your bar plot here, but make it horizantal instead of vertical. Look to the example above if you get stuck.
"""



"""# Grouped bar plot
- __Your Turn__: Create a grouped bar plot with the data below.
"""

grouped_bar_data = (data.groupby(['country', 'fruit'])[['quantity']].sum()
            .reset_index()
           )
grouped_bar_data

# Implement the grouped bar plot here.
# Look at the example for help if you get stuck.

"""# Color palette types
- Chartify includes 4 different color palette types: `categorical`, `accent`, `sequential`, `diverging`.
- Note the differences in the examples below
"""

chartify.examples.style_color_palette_categorical()

chartify.examples.style_color_palette_accent()

chartify.examples.style_color_palette_diverging()

chartify.examples.style_color_palette_sequential()

"""# Color palettes
- Chartify includes a set of pre-defined color palettes:
"""

chartify.color_palettes

"""- Use .show() to see the colors associated with each:"""

chartify.color_palettes.show()

"""- Assign the color palettes with `.set_color_palette`"""

ch = chartify.Chart(x_axis_type='categorical',
                    blank_labels=True)
ch.style.set_color_palette('categorical', 'Dark2')
ch.plot.bar(data_frame=grouped_bar_data,
            categorical_columns=['fruit', 'country'],
            numeric_column='quantity',
            color_column='fruit')
ch.show()

"""- Color palette objects include methods for manipulation. See the examples below:"""

dark2 = chartify.color_palettes['Dark2']
dark2.show()

"""- Sort"""

sorted_dark2 = dark2.sort_by_hue()
sorted_dark2.show()

"""- Expand"""

dark2.expand_palette(20).show()

"""- Shift"""

shifted_dark2 = dark2.shift_palette('white', percent=20)
shifted_dark2.show()

"""- Assign the shifted color palette to a chart:"""

ch = chartify.Chart(x_axis_type='categorical',
                    blank_labels=True)
ch.style.set_color_palette('categorical', shifted_dark2)
ch.plot.bar(data_frame=grouped_bar_data,
            categorical_columns=['fruit', 'country'],
            numeric_column='quantity',
            color_column='fruit')
ch.show()

"""# Layouts
- Chartify layouts are tailored toward use in slides.
- Notice how the output changes for each of the slide layout options below:
"""

layout_options = ['slide_100%', 'slide_75%', 'slide_50%', 'slide_25%']
for option in layout_options:
    ch = chartify.Chart(layout=option, blank_labels=True, x_axis_type='categorical')
    ch.set_title('Layout: {}'.format(option))
    ch.plot.bar(data_frame=grouped_bar_data,
            categorical_columns=['fruit', 'country'],
            numeric_column='quantity',
            color_column='fruit')

    ch.show()

"""# Advanced usage with Bokeh
- Chartify is built on top of another visualization package called [Bokeh](http://bokeh.pydata.org/en/latest/)
- The example below shows how you can access the Bokeh [figure](https://bokeh.pydata.org/en/latest/docs/reference/plotting.html#bokeh.plotting.figure.Figure) from a Chartify chart object.
"""

ch = chartify.Chart(blank_labels=True, x_axis_type='categorical')
ch.plot.bar(data_frame=grouped_bar_data,
        categorical_columns=['fruit', 'country'],
        numeric_column='quantity',
        color_column='fruit')
ch.figure

"""- The following example shows how you can modify attributes not exposed in Chartify by accessing the Bokeh figure. See [Bokeh](http://bokeh.pydata.org/en/latest/) documentation for more details."""

ch.figure.xaxis.axis_label_text_font_size = '30pt'
ch.figure.xaxis.axis_label_text_color = 'red'
ch.figure.height = 400
ch.axes.set_xaxis_label('A large xaxis label')
ch.show()