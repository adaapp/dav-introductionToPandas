# -*- coding: utf-8 -*-
"""04a Exam results.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/adaapp/dav-introductionToPandas/blob/master/04a%20Exam%20results.ipynb
"""

!pip install names

import numpy as np
import pandas as pd
import names

"""# Fake exam results

Generate some random names
"""

names.get_full_name()

[names.get_full_name() for _ in range(5)]

"""Make some (convincing) random numbers"""

np.random.normal(loc=50, scale=10)

np.random.normal(loc=50, scale=10)

[np.random.normal(loc=50, scale=10) for _ in range(5)]

[int(np.random.normal(loc=50, scale=10)) for _ in range(5)]

"""Build a list of names, some maths exam results and some physics exam results"""

n = 20
student = [names.get_full_name() for _ in range(n)]
maths = [int(np.random.normal(loc=50, scale=10)) for _ in range(n)]
physics = [m - int(np.random.normal(loc=5, scale=10)) for m in maths]

results = pd.DataFrame(data={
    "Student": student,
    "Maths": maths,
    "Physics": physics
})
results

"""## Indexing with loc, iloc"""

results.loc[5]

results.loc[5, "Physics"]

results.iloc[0,0]

results.iloc[5, "Maths"]

results.iloc[0:2,0:2]

results.iloc[3:8]

results.iloc[3:8,0:2]

"""Set the obvious index"""

resultsV2 = results.set_index(results.Student)
resultsV2

"""Drop the old column if you like"""

resultsV2.drop(columns="Student")

resultsV2

resultsV3 = resultsV2.drop(columns="Student")
resultsV3

"""Locating by index"""

resultsV3.loc["Alphonse Bolivar"]

resultsV3.loc["Alphonse Bolivar":"Will Ross"].sort_values(by="Maths")["Physics"]

"""## The filter function with regex"""

resultsV3.filter(like='t')

resultsV3.filter(regex='C.r', axis=0)

"""## The query function"""

resultsV3.query("Student < 'D'")

resultsV3.query("Maths > Physics")

resultsV3.index.str.split(" ", expand=True)

resultsV4 = resultsV3.set_index(resultsV3.index.str.split(" ", expand=True))
resultsV4

resultsV4.sort_index(level=1)

resultsV4.sort_index(level=1)

resultsV5 = resultsV4.sort_index(level=1)

resultsV5

resultsV6 = resultsV5.swaplevel()
resultsV6

resultsV6.loc["P":"W"]

resultsV6.sort_values(by="Maths", ascending=False)[:3]

"""## The numpy where function"""

resultsV6["Best"] = np.where(resultsV6.Maths > resultsV6.Physics, "Maths", "Physics")
resultsV6

resultsV6["Combined"] = resultsV6["Maths"]+resultsV6["Physics"]
resultsV6.sort_values(by="Combined", ascending=False)

"""## Categorising data with cut"""

pd.cut(resultsV6.Combined, bins=[0,30,50,70,95,1000], labels=["Fail","Third","2:2","2:1","First"])

resultsV6["Class"] = pd.cut(resultsV6.Combined, bins=[0,30,50,70,95,1000], labels=["Fail","Third","2:2","2:1","First"])

resultsV6

import seaborn as sns

resultsV6.Class.cat.categories

import seaborn as sns

sns.scatterplot(data=resultsV6, x="Maths", y="Physics", hue="Class", style="Best");

"""## Adding labels in pyplot/seaborn"""

ax = sns.scatterplot(data=resultsV6, x="Maths", y="Physics", hue="Class", style="Best")
for surname in resultsV6.index:
    ax.annotate(surname[1], (resultsV6.loc[surname, "Maths"], resultsV6.loc[surname, "Physics"]))

ax = sns.scatterplot(data=resultsV6, x="Maths", y="Physics", hue="Class", style="Best")
for surname in resultsV6.index:
    ax.text(resultsV6.loc[surname, "Maths"], resultsV6.loc[surname, "Physics"], surname[1])

ax = sns.scatterplot(data=resultsV6, x="Maths", y="Physics", hue="Class", style="Best")
for fullname in resultsV6.index:
    ax.text(resultsV6.loc[fullname, "Maths"], resultsV6.loc[fullname, "Physics"], fullname[1], rotation=30, va="center")

fg = sns.catplot(data=resultsV6, x="Class", kind="count")
ax = fg.ax
for x,bar in enumerate(ax.patches):
    if(bar.get_height()>0):
        ax.annotate(int(bar.get_height()),(x,bar.get_height()+0.35))